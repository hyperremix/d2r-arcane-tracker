---
globs: *.tsx
description: React component patterns and best practices
---

# React Component Patterns

## Component Structure
```typescript
// 1. Imports (external, internal, relative)
import type { ComponentProps } from 'electron/types/grail';
import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { useGrailStore } from '@/stores/grailStore';

// 2. Interfaces
interface ComponentProps {
  // Define props here
}

// 3. Helper functions (if needed)
function helperFunction() {
  // Helper logic
}

// 4. Main component
export function Component({ prop1, prop2 }: ComponentProps) {
  // Component logic
  return (
    // JSX
  );
}
```

## Component Guidelines
- **Single Responsibility**: Each component should have one clear purpose
- **Props Interface**: Always define TypeScript interfaces for component props
- **Default Props**: Use default parameters instead of defaultProps
- **Event Handlers**: Use `useCallback` for event handlers passed to children
- **Conditional Rendering**: Use early returns for conditional rendering
- **Fragment Usage**: Use `<>` for simple fragments, `<Fragment>` when keys are needed

## State Management
- **Local State**: Use `useState` for component-specific state
- **Global State**: Use Zustand store for shared state
- **Derived State**: Use `useMemo` for computed values
- **Side Effects**: Use `useEffect` with proper dependency arrays

## Performance Optimization
- **Memoization**: Use `useMemo` for expensive calculations
- **Callback Memoization**: Use `useCallback` for stable function references
- **Component Memoization**: Use `React.memo` for components with stable props
- **Avoid Inline Objects**: Don't create objects/arrays in render methods

## Accessibility
- **Semantic HTML**: Use appropriate HTML elements
- **ARIA Labels**: Add ARIA labels for screen readers
- **Keyboard Navigation**: Support keyboard interactions
- **Focus Management**: Handle focus appropriately

## Error Boundaries
- **Error Handling**: Wrap components in error boundaries when appropriate
- **Loading States**: Show loading indicators for async operations
- **Error States**: Display meaningful error messages
- **Fallback UI**: Provide fallback content for failed operations

## Testing Considerations
- **Testable Components**: Write components that are easy to test
- **Pure Functions**: Extract logic into pure functions when possible
- **Mock Dependencies**: Use dependency injection for external dependencies
- **Props Testing**: Test component behavior with different prop combinations