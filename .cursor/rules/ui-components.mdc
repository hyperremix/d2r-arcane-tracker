---
globs: src/components/ui/*.tsx
description: UI component patterns and conventions
---

# UI Component Patterns

## Shadcn/UI Integration
- **Base Components**: Use shadcn/ui as the foundation
- **Customization**: Extend shadcn components with custom styling
- **Consistency**: Maintain consistent design patterns
- **Accessibility**: Preserve accessibility features from shadcn

## Component Structure
```typescript
import * as React from 'react';
import { cn } from '@/lib/utils';

interface ComponentProps extends React.HTMLAttributes<HTMLDivElement> {
  // Component-specific props
}

const Component = React.forwardRef<HTMLDivElement, ComponentProps>(
  ({ className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn('base-classes', className)}
        {...props}
      />
    );
  }
);

Component.displayName = 'Component';

export { Component };
```

## Styling Conventions
- **Tailwind CSS**: Use Tailwind for all styling
- **Class Merging**: Use `cn()` utility for conditional classes
- **Responsive Design**: Use responsive prefixes (sm:, md:, lg:, xl:)
- **Dark Mode**: Support dark mode with `dark:` prefixes
- **Consistent Spacing**: Use consistent spacing scale

## Component Patterns
- **Forward Refs**: Always use `React.forwardRef` for components that render DOM elements
- **Display Names**: Set display names for better debugging
- **Props Spreading**: Spread HTML attributes for flexibility
- **Class Merging**: Merge custom classes with base classes

## Accessibility
- **ARIA Attributes**: Include appropriate ARIA attributes
- **Keyboard Navigation**: Support keyboard interactions
- **Focus Management**: Handle focus appropriately
- **Screen Readers**: Ensure screen reader compatibility

## Variants and States
- **Variant Props**: Use variant props for different styles
- **State Classes**: Use state-based classes (hover:, focus:, disabled:)
- **Size Variants**: Provide size variants when appropriate
- **Color Variants**: Use semantic color variants

## Composition
- **Compound Components**: Use compound components for complex UI
- **Slot Patterns**: Use slot patterns for flexible content
- **Render Props**: Use render props for dynamic content
- **Children Props**: Accept children for flexible content

## Performance
- **Memoization**: Use `React.memo` for expensive components
- **Lazy Loading**: Implement lazy loading for heavy components
- **Virtual Scrolling**: Use virtual scrolling for large lists
- **Debouncing**: Debounce user input for better performance

## Testing
- **Test IDs**: Add data-testid attributes for testing
- **Accessibility Testing**: Test accessibility features
- **Visual Testing**: Test visual appearance and states
- **Interaction Testing**: Test user interactions